set nocompatible " this is redundant, but I prefer explicit settings over implicit/default behavior

filetype on        " enable filetype detection
filetype indent on " enable filetype-specific indenting
filetype plugin on " enable filetype-specific plugins

syntax on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" APPEARANCE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" neovim specific settings
if has('nvim')
  set inccommand=split
endif

if has('termguicolors')
  set termguicolors
endif

""""""""""""""""""""""""""""""""""""""""
" COLORS
""""""""""""""""""""""""""""""""""""""""

" overwrite highlights/colors, the right way
" https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f
function! MyColors() abort
  highlight CursorLine
        \ cterm=underline ctermbg=NONE ctermfg=NONE
        \ gui=underline guibg=NONE guifg=NONE
  highlight CursorLineNr cterm=NONE
endfunction

augroup MyColors
  autocmd!
  autocmd ColorScheme * call MyColors()
  autocmd InsertEnter * setlocal cursorline
  autocmd InsertLeave * setlocal nocursorline
augroup END

set background=dark
let g:gruvbox_invert_selection = 0

colorscheme gruvbox

" disable fzf colors on light background
if &background ==# 'light'
  let $FZF_DEFAULT_OPTS="--color=bw"
else
  let $FZF_DEFAULT_OPTS=""
endif

""""""""""""""""""""""""""""""""""""""""
" FONTS
""""""""""""""""""""""""""""""""""""""""

" set font for vim GUIs
if has("gui_running")
  if has("gui_gtk")
    set guifont=JetBrainsMono\ Nerd\ Font\ 11
  elseif has("gui_macvim")
    set guifont=JetBrainsMono\ Nerd\ Font:h11
  elseif has("gui_win32")
    set guifont=JetBrainsMono\ Nerd\ Font:h11:cANSI
  endif
endif

""""""""""""""""""""""""""""""""""""""""
" FILE EXPLORER
""""""""""""""""""""""""""""""""""""""""

" netrw
let g:netrw_liststyle = 3
let g:netrw_winsize   = 25

""""""""""""""""""""""""""""""""""""""""
" STATUSLINE
""""""""""""""""""""""""""""""""""""""""

" statusline
let g:currentmode={
       \ 'n'  : 'NORMAL',
       \ 'v'  : 'VISUAL',
       \ 'V'  : 'V·Line',
       \ '' : 'V·Block',
       \ 'i'  : 'INSERT',
       \ 'R'  : 'REPLACE',
       \ 'Rv' : 'V·REPLACE',
       \ 'c'  : 'COMMAND',
       \ }

" current mode
set statusline=%#StatusLineTerm#
set statusline+=%{'\ '} " space
set statusline+=%{toupper(g:currentmode[mode()])}
set statusline+=%{'\ '}
set statusline+=%*
" file name
set statusline+=%{'\ '}
set statusline+=%F
set statusline+=%{'\ '}
" spell?
set statusline+=%#Error#
set statusline+=%{&spell?'[SPELL]':''}
set statusline+=%*
" paste?
set statusline+=%#Error#
set statusline+=%{&paste?'[PASTE]':''}
set statusline+=%*
" modified?
set statusline+=%#Error#
set statusline+=%m
set statusline+=%*
" read only?
set statusline+=%#Error#
set statusline+=%r
set statusline+=%*
" help?
set statusline+=%#Error#
set statusline+=%h
set statusline+=%*
" preview?
set statusline+=%#Error#
set statusline+=%w
set statusline+=%*
" truncate from here on
set statusline+=%<
" separate left/right aligned items
set statusline+=%=
" tabstop/softtabstop/shiftwidth/expandtab
set statusline+=[ts/sts/sw/et:\ %{&ts}/%{&sts}/%{&sw}/%{&et}]
" file format
set statusline+=[%{&ff}]
" filetype
set statusline+=%y
" current line & column
set statusline+=[col:\ %03c]
" current line / total # lines (% into file)
set statusline+=[line:\ %l/%L\ (%p%%)]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent
set autoread
set backspace=indent,eol,start
set belloff=all
set breakindent
set clipboard=unnamed,unnamedplus
set cmdheight=2
set colorcolumn=+1
set completeopt=menu,noinsert,noselect
set conceallevel=0
set display+=lastline
set encoding=utf-8
set fileencoding=utf-8
set formatoptions+=j " remove comment leader when joining lines
set formatoptions+=n " when formatting text, recognize numbered lists
set formatoptions-=t " don't auto-wrap text using textwidth
set history=1000
set hidden
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set mouse=a
set nobackup
set nocursorline
set nofoldenable
set nomodeline
set norelativenumber
set noshowcmd
set noshowmode
set nospell
set noswapfile
set novisualbell
set nowrap
set nowrapscan " stop searching at end of file. do not restart search from top
set nowritebackup
set number
set path+=**
set pumheight=10
set ruler
set secure
set shortmess+=c
set showmatch
set smartcase
set smarttab
set splitbelow
set splitright
set t_ut=
set tags+=tags
set textwidth=79
set ttyfast
set undodir=$HOME/.vim/undo
set undofile
set updatetime=100
set wildignorecase
set wildmenu
set wildmode=longest,full
set scrolloff=1
set sidescrolloff=5

if !has('nvim') && &ttimeoutlen == -1
  set ttimeout
  set ttimeoutlen=100
endif

if findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILETYPES
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup general
  autocmd!
  autocmd FileType vim,yaml,json,markdown,ruby,terraform,hcl,dockerfile
        \ setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab
augroup end

augroup mans
  autocmd!
  autocmd FileType yaml.docker-compose
        \ setlocal keywordprg=~/.vim/mans/docker-compose
  autocmd FileType Dockerfile
        \ setlocal keywordprg=~/.vim/mans/docker
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" create new files if they don't exist on 'gf'
map gf :e <cfile><cr>

" Misc
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Getting around
nnoremap <Leader>b :b <C-d>
nnoremap <Leader>e :e **/
nnoremap <Leader>i :Ilist<space>
nnoremap <Leader>j :tjump /
nnoremap <Leader>m :make<cr>
nnoremap <Leader>q :b#<cr>
nnoremap <Leader>f :Lex!<cr>
nnoremap <Leader>g :silent lgrep<Space>

nnoremap <silent> ]l :lnext<CR>
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [b :bprevious<CR>

" mappings to custom functions. see functions & commands
nnoremap <leader>T :TOC<CR>
nnoremap <leader>D :GDiff<CR>
nnoremap <leader>G :Git<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS & COMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" markdown TOC
" npm i -g doctoc
function! GenTOC() abort
  silent ! clear
  silent ! doctoc --title '\#\# Table of Contents' %
  redraw!
endfunction
command! TOC :call GenTOC()

" trim trailing whitespace
" https://www.vi-improved.org/recommendations/
function! TrimTrailingWhitespace() abort
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction
command! TrimTrailingWhitespace :call TrimTrailingWhitespace()

" git diff
function! GitDiff() abort
  silent ! clear
  silent ! git diff %
  redraw!
endfunction
command! GDiff :call GitDiff()

" brew install gitui lazygit
function! Git() abort
  silent ! clear
  if executable('gitui')
    silent ! gitui
  elseif executable('lazygit')
    silent ! lazygit
  endif
  redraw!
endfunction
command! Git :call Git()

" git open
" npm i -g git-open
function! GitBrowse() abort
  silent ! clear
  silent! git open
  redraw!
endfunction
command! GBrowse :call GitBrowse()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FORMATTERS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let s:formatprg_for_filetype = {
      \ "css": "prettier --parser=css --stdin-filepath --",
      \ "go": "gofmt",
      \ "html": "prettier --parser=html --stdin-filepath --",
      \ "javascript": "prettier --stdin-filepath --",
      \ "json": "prettier --parser=json --stdin-filepath --",
      \ "markdown": "prettier --parser=markdown --stdin-filepath --",
      \ "sql": "sqlformat -k upper -r -",
      \ "yaml": "prettier --parser=yaml --stdin-filepath --",
      \ "terraform": "terraform fmt -",
      \ "rust": "rustfmt",
      \ }

for [ft, fp] in items(s:formatprg_for_filetype)
  execute "autocmd FileType ".ft." let &l:formatprg=\"".fp."\" | setlocal formatexpr="
endfor

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

