set nocompatible

call plug#begin('~/.vim/plugged')

" startup time debugger
Plug 'tweekmonster/startuptime.vim'

" editorconfig
Plug 'editorconfig/editorconfig-vim'

" formatters
" Plug 'sbdchd/neoformat'
" Plug 'joereynolds/gq.vim'

" highlight yanks
Plug 'machakann/vim-highlightedyank'

" git gutters
Plug 'mhinz/vim-signify'

" tab completion
" Plug 'ervandew/supertab'
Plug 'ajh17/VimCompletesMe'

" test Runner
Plug 'janko/vim-test'

" tmux
Plug 'tmux-plugins/vim-tmux-focus-events'

" fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" alignment
Plug 'godlygeek/tabular'
Plug 'tommcdo/vim-lion'

" change root dir
Plug 'airblade/vim-rooter'

" text objects
Plug 'wellle/targets.vim'

" tpope
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive' | Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'

" hashicorp tools
Plug 'hashivim/vim-hashicorp-tools'

" tags
Plug 'ludovicchabant/vim-gutentags'
Plug 'tomtom/tlib_vim'
Plug 'tomtom/ttags_vim'
Plug 'majutsushi/tagbar'

" romainl
Plug 'romainl/vim-qf'
Plug 'romainl/vim-qlist'

" languages
Plug 'dense-analysis/ale'
Plug 'chrisbra/csv.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'rust-lang/rust.vim'
Plug 'stephpy/vim-yaml'
Plug 'cespare/vim-toml'
Plug 'tsandall/vim-rego'
Plug 'towolf/vim-helm'
Plug 'ekalinin/Dockerfile.vim'
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'elzr/vim-json'
Plug 'fatih/vim-go' , { 'do': ':GoUpdateBinaries' }

" appearance
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'edkolev/tmuxline.vim'

call plug#end()

filetype on        " Enable filetype detection
filetype indent on " Enable filetype-specific indenting
filetype plugin on " Enable filetype-specific plugins

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Appearance
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f
function! MyColors() abort
  highlight SignColumn NONE

  if has('termguicolors')
    set termguicolors
  endif

  " disable fzf colors on light background
  if &background ==# 'light'
    let $FZF_DEFAULT_OPTS = "--color=bw"
  else
    let $FZF_DEFAULT_OPTS = ""
  endif

endfunction

augroup MyColors
  autocmd!
  autocmd ColorScheme * call MyColors()
augroup END

set background=dark
colorscheme gruvbox

" neovim specific settings
if has('nvim')
  set inccommand=split
endif

" set font for vim GUIs
if has("gui_running")
  if has("gui_gtk")
    set guifont=JetBrainsMono\ Nerd\ Font\ 11
  elseif has("gui_macvim")
    set guifont=JetBrainsMono\ Nerd\ Font:h11
  elseif has("gui_win32")
    set guifont=JetBrainsMono\ Nerd\ Font:h11:cANSI
  endif
endif

function! ToggleSyntax() abort
  if exists("g:syntax_on") | syntax off | else | syntax enable | endif
endfunction
command! ToggleSyntax :call ToggleSyntax()

" tmuxline
let g:tmuxline_status_justify = 'left'
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : '#I #W #F',
      \'cwin' : '#I #W #F',
      \'y'    : [ '%a', '%r', '%Y-%m-%d' ],
      \'z'    : '#(whoami)@#H',
      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent
set autoread
set backspace=indent,eol,start
set belloff=all
set breakindent
set clipboard=unnamed,unnamedplus
set cmdheight=2
set colorcolumn=+1
set completeopt=menu,noinsert,noselect
set conceallevel=0
set cursorline
set display=lastline
set encoding=utf-8
set fileencoding=utf-8
set formatoptions+=j " remove comment leader when joining lines
set formatoptions+=n " when formatting text, recognize numbered lists
set formatoptions-=t " don't auto-wrap text using textwidth
set hidden
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set mouse=a
set nobackup
set nofoldenable
set nomodeline
set norelativenumber
set noshowcmd
set noshowmode
set nospell
set noswapfile
set novisualbell
set nowrap
set nowrapscan " stop searching at end of file. do not restart search from top
set nowritebackup
set number
set path+=**
set pumheight=10
set ruler
set secure
set shortmess+=c
set showmatch
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set splitright
set t_ut=
set tags+=tags
set textwidth=79
set ttyfast
set undodir=$HOME/.vim/undo
set undofile
set updatetime=100
set wildignorecase
set wildmenu
set wildmode=longest,full

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > FileTypes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup general
  autocmd!

  autocmd FileType yaml.docker-compose
        \ setlocal keywordprg=~/.vim/mans/docker-compose

  autocmd FileType Dockerfile
        \ setlocal keywordprg=~/.vim/mans/docker

augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" create new files if they don't exist on 'gf'
map gf :e <cfile><cr>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Misc
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Getting around
nnoremap <Leader>b :b <C-d>
nnoremap <Leader>e :e **/
nnoremap <Leader>i :Ilist<space>
nnoremap <Leader>j :tjump /
nnoremap <Leader>m :make<cr>
nnoremap <Leader>q :b#<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > Functions & Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! GenTOC() abort
  " npm i -g doctoc
  silent ! doctoc --title "\#\# Table of Contents" %
  redraw!
endfunction
command! TOC :call GenTOC()
nnoremap <leader>T :TOC<CR>

" https://www.vi-improved.org/recommendations/
function! TrimTrailingWhitespace() abort
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction
command! TrimTrailingWhitespace :call TrimTrailingWhitespace()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > Formatters
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let s:formatprg_for_filetype = {
      \ "css"        : "prettier --stdin-filepath",
      \ "go"         : "gofmt",
      \ "html"       : "prettier --stdin-filepath",
      \ "javascript" : "prettier --stdin-filepath",
      \ "json"       : "prettier --stdin-filepath",
      \ "markdown"   : "prettier --stdin-filepath",
      \ "sql"        : "sqlformat -k upper -r -",
      \ "yaml"       : "prettier --stdin-filepath",
      \ "terraform"  : "terraform fmt",
      \ }

for [ft, fp] in items(s:formatprg_for_filetype)
  execute "autocmd FileType ".ft." let &l:formatprg=\"".fp."\" | setlocal formatexpr="
endfor

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS: PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ale
set omnifunc=ale#completion#OmniFunc
let g:ale_hover_cursor = 0
let g:ale_set_quickfix = 1
let g:ale_fixers = {
      \ 'bash':       [ 'shfmt' ],
      \ 'go':         [ 'goimports' ],
      \ 'javascript': [ 'prettier' ],
      \ 'json':       [ 'prettier' ],
      \ 'markdown':   [ 'prettier' ],
      \ 'sh':         [ 'shfmt' ],
      \ 'terraform':  [ 'terraform' ],
      \ 'yaml':       [ 'prettier' ],
      \ }

" languages
let g:vim_json_syntax_conceal = 0

" lion
let g:lion_squeeze_spaces = 1

" fugitive-gitlab
let g:fugitive_gitlab_domains = [
      \ 'https://gitlab.zeta.tools',
      \ 'https://gitlab.com'
      \ ]

" signify
let g:signify_sign_add               = '+'
let g:signify_sign_delete            = '_'
let g:signify_sign_delete_first_line = '‾'
let g:signify_sign_change            = '~'
nnoremap gs :SignifyHunkDiff<cr>

" vim-markdown
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_frontmatter = 1

" neoformat
" let g:neoformat_try_formatprg      = 1
" let g:neoformat_rego_opa     = {
"       \ 'exe': 'opa',
"       \ 'args': ['fmt'],
"       \ 'stdin': 1,
"       \ }
" let g:neoformat_enabled_rego = ['opa']

" vim-test
let test#strategy = "dispatch"

" tagbar
nnoremap <Leader>t :TagbarToggle<CR>
