" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('~/.vim/plugged')

" utilities
Plug 'https://github.com/airblade/vim-rooter'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/wellle/targets.vim'
Plug 'https://github.com/tweekmonster/startuptime.vim'
Plug 'https://github.com/tmux-plugins/vim-tmux-focus-events'
Plug 'https://github.com/tyru/open-browser.vim'
Plug 'https://github.com/itchyny/lightline.vim'
Plug 'https://github.com/maximbaz/lightline-ale'
Plug 'https://github.com/justinmk/vim-sneak'
Plug 'https://github.com/cocopon/pgmnt.vim'
" Plug 'https://github.com/cocopon/iceberg.vim'
Plug 'https://github.com/pbnj/iceberg.vim', { 'branch': 'fix-ale-highlights' }
Plug 'https://github.com/preservim/nerdtree'
Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin'

" tpope
Plug 'https://github.com/tpope/vim-dadbod' | Plug 'kristijanhusak/vim-dadbod-ui'
Plug 'https://github.com/tpope/vim-dispatch'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive' | Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'https://github.com/tpope/vim-jdaddy'
Plug 'https://github.com/tpope/vim-rhubarb'
Plug 'https://github.com/tpope/vim-sensible'
Plug 'https://github.com/tpope/vim-sleuth'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/tpope/vim-characterize'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-projectionist'

" languages
let g:ale_completion_enabled = 1
Plug 'https://github.com/dense-analysis/ale'
Plug 'https://github.com/fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'https://github.com/leafgarland/typescript-vim'
Plug 'https://github.com/pangloss/vim-javascript'
Plug 'https://github.com/vim-ruby/vim-ruby'
Plug 'https://github.com/tpope/vim-rails'
Plug 'https://github.com/rust-lang/rust.vim'
Plug 'https://github.com/Quramy/vison'
Plug 'https://github.com/iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/janko/vim-test'
Plug 'https://github.com/ludovicchabant/vim-gutentags'
Plug 'https://github.com/majutsushi/tagbar'
Plug 'https://github.com/hashivim/vim-hashicorp-tools'
Plug 'https://github.com/jparise/vim-graphql'
Plug 'https://github.com/habamax/vim-asciidoctor'
Plug 'https://github.com/towolf/vim-helm'
Plug 'https://github.com/cespare/vim-toml'
Plug 'https://github.com/elzr/vim-json' | let g:vim_json_syntax_conceal = 0
Plug 'https://github.com/mxw/vim-jsx'
Plug 'https://github.com/ianks/vim-tsx'
Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/honza/vim-snippets'

call plug#end()

filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set belloff=all
set breakindent
set clipboard=unnamed
set cmdheight=2
set completeopt=menu,noinsert,noselect
set conceallevel=0
set display+=lastline
set encoding=utf-8
set fileencoding=utf-8
set formatoptions+=j " remove comment leader when joining lines
set formatoptions+=n " when formatting text, recognize numbered lists
set formatoptions-=t " don't auto-wrap text using textwidth
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:\|\ ,extends:≫,precedes:≪,nbsp:·,trail:·
set modeline
set mouse=a
set nobackup
set nocursorline
set nofoldenable
set norelativenumber
set noswapfile
set nowrap
set nowrapscan " stop searching at end of file. do not restart search from top
set nowritebackup
set number
set path=.,**
set pumheight=10
set ruler
set scrolloff=1
set secure
set shortmess+=c
set showcmd
set showmatch
set showmode
set sidescrolloff=5
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set splitright
set tags+=tags
set ttyfast
set undodir=$HOME/.vim/undo
set undofile
set updatetime=100
set wildignorecase
set wildmenu
set wildmode=longest,full

if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif

if has("gui_running")
  set guifont=JetBrainsMono\ Nerd\ Font:h11
  set guioptions-=r
  set guioptions-=R
  set guioptions-=l
  set guioptions-=L
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" APPEARANCE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" disable netrw's gx mapping. see open-browser.vim plugin.
let g:netrw_nogx       = 1
let g:netrw_liststyle  = 3
let g:netrw_winsize    = 25
let loaded_netrwPlugin = 1

syntax on

augroup CursorLine
  autocmd InsertEnter * set cul
  autocmd InsertLeave * set nocul
augroup END

if has('termguicolors')
  set termguicolors
endif

colorscheme iceberg

""""""""""""""""""""""""""""""""""""""""
" statusline
""""""""""""""""""""""""""""""""""""""""

let g:lightline = {}
let g:lightline.colorscheme = 'iceberg'
let g:lightline.active = {}
let g:lightline.active.left = [
      \ ['mode', 'paste'],
      \ ['readonly', 'relativepath', 'modified'],
      \ [ 'gitbranch' ],
      \ ]
let g:lightline.active.right = [
      \ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
      \ [ 'lineinfo' ],
      \ [ 'percent' ],
      \ [ 'filetype', 'fileformat', 'fileencoding' ],
      \ ]
let g:lightline.component_function = {
      \ 'gitbranch': 'FugitiveHead',
      \ }
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_infos': 'lightline#ale#infos',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right',
      \ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" FZF mappings
nnoremap <Leader>b <cmd>Buffers<cr>
nnoremap <Leader>f <cmd>Files<cr>
nnoremap <Leader>F <cmd>GFiles?<cr>
nnoremap <Leader>g <cmd>Rg<cr>

nnoremap <silent> ]l :lnext<CR>
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>

" https://github.com/onivim/oni/issues/2342
tnoremap <s-space> <space>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" generate table of contents for markdown
function! GenTableOfContents() abort
  if &filetype == 'markdown'
    execute "silent ! npx doctoc --notitle %" | execute "silent ! npx prettier --write %" | checktime | silent redraw!
  endif
endfunction
command! TOC call GenTableOfContents()

""""""""""""""""""""""""""""""""""""""""
" CONFIGURATION FILE INITIALIZER
""""""""""""""""""""""""""""""""""""""""
" helper function
function! InitConfig(...)
  for config in a:000
    echomsg printf('cp -R ~/.dotfiles/templates/%s/ %s', config, FindRootDirectory())
    execute printf('silent !cp -R ~/.dotfiles/templates/%s/ %s', config, FindRootDirectory())
    redraw!
  endfor
endfunction

function! InitConfigCompletion(A, L, P) abort
  return systemlist('ls ~/.dotfiles/templates')
endfunction

command! -nargs=+ -complete=customlist,InitConfigCompletion InitConfig call InitConfig(<f-args>)

""""""""""""""""""""""""""""""""""""""""
" UTILITIES
""""""""""""""""""""""""""""""""""""""""

" yarn global add jira-cli
command! -nargs=* Jira execute '! clear && jira <args>'

" brew install glab
command! -nargs=* Glab execute '! clear && glab <args>'

function! Htop() abort
  terminal ++close ++shell htop
endfunction
command! Htop call Htop()

function! Btm() abort
  terminal ++close ++shell btm
endfunction
command! Btm call Btm()

function! BrewUp() abort
  terminal brew update && brew upgrade && brew cleanup && echo done
endfunction
command! BrewUp call BrewUp()

command! BuffOnly :%bdelete | edit# | normal `"

if has('neovim')
  command! -nargs=* T split | terminal <args>
  command! -nargs=* VT vsplit | terminal <args>
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" install built-in `matchit` plugin.
" See :h matchit-install
packadd! matchit

""""""""""""""""""""""""""""""""""""""""
" nerdtree
""""""""""""""""""""""""""""""""""""""""

let g:NERDTreeShowHidden = 1
let g:NERDTreeWinPos     = "right"
let g:NERDTreeWinSize    = 80

nnoremap <leader>t <cmd>NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""
" open-browser
""""""""""""""""""""""""""""""""""""""""

nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

""""""""""""""""""""""""""""""""""""""""
" vim-signify
""""""""""""""""""""""""""""""""""""""""

nnoremap <silent> gs <cmd>SignifyHunkDiff<cr>

let g:signify_sign_add               = '+'
let g:signify_sign_delete            = '-'
let g:signify_sign_delete_first_line = '-'
let g:signify_sign_change            = '~'

""""""""""""""""""""""""""""""""""""""""
" vim-fugitive
""""""""""""""""""""""""""""""""""""""""

let g:fugitive_gitlab_domains = ['https://gitlab.zeta.tools']

""""""""""""""""""""""""""""""""""""""""
" fzf.vim
""""""""""""""""""""""""""""""""""""""""

let g:fzf_layout = { 'down': '~40%' }

""""""""""""""""""""""""""""""""""""""""
" ale
""""""""""""""""""""""""""""""""""""""""

set omnifunc=ale#completion#OmniFunc
let g:ale_fixers = {
      \ '*'          : [ "remove_trailing_lines", "trim_whitespace" ] ,
      \ 'sh'         : [ "shfmt"                                    ] ,
      \ 'bash'       : [ "shfmt"                                    ] ,
      \ 'javascript' : [ "prettier"                                 ] ,
      \ 'typescript' : [ "prettier"                                 ] ,
      \ 'markdown'   : [ "prettier"                                 ] ,
      \ 'yaml'       : [ "prettier"                                 ] ,
      \ 'json'       : [ "prettier"                                 ] ,
      \ 'go'         : [ "goimports"                                ] ,
      \ 'rust'       : [ "rustfmt"                                  ] ,
      \ 'ruby'       : [ "rubocop"                                  ] ,
      \ 'graphql'    : [ "prettier"                                 ] ,
      \ 'hcl'        : [ "terraform"                                ] ,
      \ 'terraform'  : [ "terraform"                                ] ,
      \ 'html'       : [ "prettier"                                 ] ,
      \ }

nnoremap <silent> <leader>af <cmd>ALEFix<cr>
nnoremap <silent> <leader>al <cmd>ALELint<cr>

