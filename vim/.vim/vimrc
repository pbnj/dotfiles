set nocompatible

call plug#begin('~/.vim/plugged')

" lsp

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'ncm2/ncm2'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-github'
Plug 'roxma/nvim-yarp'
if !has('nvim')
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" git gutters
Plug 'mhinz/vim-signify'

" vimcompletesme
Plug 'ajh17/VimCompletesMe'

" highlight yank
Plug 'machakann/vim-highlightedyank'

" formatters
Plug 'sbdchd/neoformat'

" test Runner
Plug 'janko/vim-test'

" tmux
Plug 'tmux-plugins/vim-tmux-focus-events'

" fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" align
Plug 'godlygeek/tabular'

" change root dir
Plug 'airblade/vim-rooter'

" commenter
Plug 'preservim/nerdcommenter'
let g:NERDSpaceDelims = 1

" tpope
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" hashicorp tools
Plug 'hashivim/vim-hashicorp-tools'

" languages
Plug 'rust-lang/rust.vim'
Plug 'stephpy/vim-yaml'
Plug 'cespare/vim-toml'
Plug 'tsandall/vim-rego'
Plug 'towolf/vim-helm'
Plug 'ekalinin/Dockerfile.vim'

Plug 'plasticboy/vim-markdown'

Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0

Plug 'fatih/vim-go' , { 'do': ':GoUpdateBinaries' }

" colorschemes
Plug 'flazz/vim-colorschemes'

call plug#end()

filetype on        " Enable filetype detection
filetype indent on " Enable filetype-specific indenting
filetype plugin on " Enable filetype-specific plugins

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Appearance
"""""""""""""""""""""""""""""""""""""""""

augroup MyColor
  autocmd!
  autocmd ColorScheme * highlight SignColumn gui=NONE guibg=NONE guifg=NONE
        \ | highlight DiffAdd gui=NONE guibg=NONE guifg=Green
        \ | highlight DiffChange gui=NONE guibg=NONE guifg=Orange
        \ | highlight DiffDelete gui=NONE guibg=NONE guifg=Red
augroup END
colorscheme PaperColor
set background=light

let loaded_netrwPlugin = 1 " Disable netrw plugin

" neovim specific settings
if has('nvim')
  set inccommand=split
  set termguicolors
endif

" set some options based on vim environment (e.g. tui, gui)
if has("gui_running")
  if has("gui_gtk")
    set guifont=JetBrainsMono\ Nerd\ Font\ 11
  elseif has("gui_macvim")
    set guifont=JetBrainsMono\ Nerd\ Font:h11
  elseif has("gui_win32")
    set guifont=JetBrainsMono\ Nerd\ Font:h11:cANSI
  endif
endif

" statusline

set statusline=
set statusline+=%f                        " file name
set statusline+=%m                        " modified
set statusline+=%r                        " read only
set statusline+=%h                        " help
set statusline+=%w                        " preview
set statusline+=[%L]                      " number of lines
set statusline+=[%{&ff}]                  " file format
set statusline+=%y                        " syntax
set statusline+=[%p%%]                    " percentage into file
set statusline+=[%04l,%04v]               " current line & column
set statusline+=\ %{FugitiveStatusline()} " git info

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Options
"""""""""""""""""""""""""""""""""""""""""

set autoindent
set autoread
set backspace=indent,eol,start
set belloff=all
set breakindent
set cmdheight=2
set colorcolumn=+1
set completeopt=menu,noinsert,noselect
set conceallevel=0
set cursorline
set display=lastline
set encoding=utf-8
set fileencoding=utf-8
set formatoptions+=j                                      "  remove comment leader when joining lines
set formatoptions+=n                                      "  when formatting text, recognize numbered lists
set hidden
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set mouse=a
set nobackup
set nofoldenable
set nomodeline
set norelativenumber
set nospell
set noswapfile
set novisualbell
set nowrap
set nowritebackup
set number
set path+=**
set pumheight=10
set ruler
set shortmess+=c
set showcmd
set showmatch
set showmode
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set splitright
set t_ut=""
set tags+=tags
set textwidth=79
set ttyfast
set undodir=$HOME/.vim/undo
set undofile
set updatetime=100
set wildignorecase
set wildmenu
set wildmode=longest,full

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > Mappings
""""""""""""""""""""""""""""""""""""""""

" Misc
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Getting around
nnoremap <Leader>b :b <C-d>
nnoremap <Leader>e :e **/
nnoremap <Leader>i :Ilist<space>
nnoremap <Leader>j :tjump /
nnoremap <Leader>m :make<cr>
nnoremap <Leader>q :b#<cr>
nnoremap <Leader>t :TTags<space>*<space>*<space>.<cr>

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > FileTypes
""""""""""""""""""""""""""""""""""""""""

augroup general
  autocmd!
  autocmd FileType vim,markdown,json,terraform,hcl,tf,ruby
        \ setlocal softtabstop=2 |
        \ setlocal shiftwidth=2  |
        \ setlocal expandtab
augroup END

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: General > Functions/Commands
""""""""""""""""""""""""""""""""""""""""

function! GenTOC() abort
  " npm i -g doctoc
  silent ! doctoc --notitle %
  silent ! prettier --write %
  redraw!
endfunction
command! TOC :call GenTOC()

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Plugins > vim-go
""""""""""""""""""""""""""""""""""""""""

let g:go_version_warning        = 0 " disable version warnings
let g:go_def_mapping_enabled    = 0 " disable `gd`
let g:go_doc_keywordprg_enabled = 0 " disable `K`
let g:go_gopls_enabled          = 0 " disable `gopls`

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Plugins > vim-markdown
""""""""""""""""""""""""""""""""""""""""

let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_frontmatter = 1

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Plugins > vim-test
""""""""""""""""""""""""""""""""""""""""

nnoremap <leader>TF :TestFile<CR>
nnoremap <leader>TL :TestLast<CR>
nnoremap <leader>TN :TestNearest<CR>
nnoremap <leader>TS :TestSuite<CR>
nnoremap <leader>TV :TestVisit<CR>
let test#strategy = "dispatch"

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Plugins > signify
""""""""""""""""""""""""""""""""""""""""

let g:signify_sign_add               = '▌'
let g:signify_sign_delete            = '▌'
let g:signify_sign_delete_first_line = '▌'
let g:signify_sign_change            = '▌'
let g:signify_sign_show_count        = 0

nnoremap gS :SignifyDiff<cr>
nnoremap gs :SignifyHunkDiff<cr>

""""""""""""""""""""""""""""""""""""""""
" SETTINGS: Plugins > languageclient-neovim
""""""""""""""""""""""""""""""""""""""""

" register language servers
" https://microsoft.github.io/language-server-protocol/implementors/servers/
" https://github.com/iamcco/vim-language-server
" https://github.com/bash-lsp/bash-language-server
" https://github.com/redhat-developer/yaml-language-server
" https://github.com/rcjsuen/dockerfile-language-server-nodejs
" https://solargraph.org/guides/getting-started
let g:LanguageClient_serverCommands = {
      \ 'Dockerfile': ['docker-langserver', '--stdio'],
      \ 'go': ['gopls'],
      \ 'rust': ['rust-analyzer'],
      \ 'sh': ['bash-language-server', 'start'],
      \ 'vim': ['vim-language-server', '--stdio'],
      \ 'yaml': ['yaml-language-server', '--stdio'],
      \ }

" Run gofmt on save
autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

" statusline
function! LSPStatusLine() abort
  let l:diagnosticsDict = LanguageClient#statusLineDiagnosticsCounts()
  let l:errors = get(l:diagnosticsDict,'E',0)
  let l:warnings = get(l:diagnosticsDict,'W',0)
  let l:informations = get(l:diagnosticsDict,'I',0)
  let l:hints = get(l:diagnosticsDict,'H',0)
  return l:errors + l:warnings + l:informations + l:hints == 0 ? "" : "E:" . l:errors . " " . "W:" . l:warnings . " " . "I:" . l:informations . " " . "H:" . l:hints
endfunction
set statusline+=\ %{LSPStatusLine()} " statusline

" mappings
nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
nnoremap gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
nnoremap gr :call LanguageClient#textDocument_references()<CR>
nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
nnoremap K :call LanguageClient#textDocument_hover()<CR>
nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
nnoremap go :call LanguageClient_textDocument_documentSymbol()<CR>
nnoremap gO :call LanguageClient#workspace_symbol()<CR>
nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>

