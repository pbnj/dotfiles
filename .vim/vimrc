" install vim-plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" utilities
Plug 'https://github.com/airblade/vim-rooter'
Plug 'https://github.com/cocopon/inspecthi.vim'
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/habamax/vim-asciidoctor'
Plug 'https://github.com/hashivim/vim-hashicorp-tools'
Plug 'https://github.com/honza/vim-snippets'
Plug 'https://github.com/janko/vim-test'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/justinmk/vim-sneak'
Plug 'https://github.com/liuchengxu/vista.vim'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/osyo-manga/vim-over'
Plug 'https://github.com/Quramy/vison'
Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/tmux-plugins/vim-tmux-focus-events'
Plug 'https://github.com/tweekmonster/startuptime.vim'
Plug 'https://github.com/tyru/open-browser-github.vim'
Plug 'https://github.com/tyru/open-browser.vim'
Plug 'https://github.com/vim-scripts/YankRing.vim'
Plug 'https://github.com/wellle/targets.vim'
Plug 'https://github.com/wellle/tmux-complete.vim'

" lightline
Plug 'https://github.com/itchyny/lightline.vim'
Plug 'https://github.com/maximbaz/lightline-ale'
Plug 'https://github.com/niklaas/lightline-gitdiff'

" tpope
Plug 'https://github.com/tpope/vim-dadbod' | Plug 'kristijanhusak/vim-dadbod-ui'
Plug 'https://github.com/tpope/vim-dispatch'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive' | Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'https://github.com/tpope/vim-jdaddy'
Plug 'https://github.com/tpope/vim-rhubarb'
Plug 'https://github.com/tpope/vim-sensible'
Plug 'https://github.com/tpope/vim-sleuth'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/tpope/vim-characterize'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-projectionist'

" languages
let g:ale_completion_enabled = 1
Plug 'https://github.com/dense-analysis/ale'

Plug 'https://github.com/cespare/vim-toml'
Plug 'https://github.com/elzr/vim-json' | let g:vim_json_syntax_conceal = 0
Plug 'https://github.com/fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'https://github.com/iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
Plug 'https://github.com/ianks/vim-tsx'
Plug 'https://github.com/jparise/vim-graphql'
Plug 'https://github.com/leafgarland/typescript-vim'
Plug 'https://github.com/mxw/vim-jsx'
Plug 'https://github.com/pangloss/vim-javascript'
Plug 'https://github.com/rust-lang/rust.vim'
Plug 'https://github.com/towolf/vim-helm'
Plug 'https://github.com/tpope/vim-rails'
Plug 'https://github.com/vim-ruby/vim-ruby'

" colorscheme
Plug 'https://github.com/pbnj/vim-colors-pbnj'
Plug 'https://github.com/lifepillar/vim-gruvbox8'
Plug 'https://github.com/lifepillar/vim-colortemplate'

call plug#end()

filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set belloff=all
set breakindent
set clipboard=unnamed,unnamedplus
set cmdheight=2
set completeopt=menuone,noinsert,noselect
set conceallevel=0
set display+=lastline
set encoding=utf-8
set fileencoding=utf-8
set formatoptions+=j
set formatoptions+=n
set formatoptions-=t
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:\|\ ,extends:>,precedes:<,nbsp:·,trail:·
set modeline
set mouse=a
set nobackup
set nocursorline
set nofoldenable
set nonumber
set norelativenumber
set noruler
set noshowmode
set noswapfile
set nowrap
set nowrapscan
set nowritebackup
set path=.,**
set pumheight=10
set scrolloff=1
set secure
set shortmess+=c
set showcmd
set showmatch
set sidescrolloff=5
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set splitright
set tags=./tags
set ttyfast
set undodir=~/.vim/undo
set undofile
set updatetime=100
set wildignorecase
set wildmenu
set wildmode=longest,full

if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif

if has("nvim")
  set inccommand=split
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" APPEARANCE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup CursorLine
  autocmd!
  autocmd InsertEnter * set cursorline
  autocmd InsertLeave * set nocursorline
augroup END

" disable netrw's gx mapping. see open-browser.vim plugin.
let g:netrw_nogx       = 1
let g:netrw_liststyle  = 3
let g:netrw_winsize    = 25
let g:loaded_netrwPlugin = 1

syntax on

" colorscheme pbnj
colorscheme gruvbox8

""""""""""""""""""""""""""""""""""""""""
" STATUSLINE
""""""""""""""""""""""""""""""""""""""""

let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox8'
let g:lightline.active = {}

let g:lightline.active.left = [
      \ [ 'mode', 'paste' ] ,
      \ [ 'bufnum', 'readonly', 'relativepath', 'modified' ] ,
      \ [ 'gitbranch', 'gitdiff' ],
      \ ]

let g:lightline.active.right = [
      \ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ] ,
      \ [ 'coc_info', 'coc_hints', 'coc_errors', 'coc_warnings', 'coc_ok' ],
      \ [ 'coc_status' ],
      \ [ 'lineinfo' ] ,
      \ [ 'percent' ] ,
      \ [ 'method', 'filetype', 'fileformat' ] ,
      \ ]

let g:lightline.component_function = {
      \ 'gitbranch' : 'FugitiveHead',
      \ 'method'    : 'NearestMethodOrFunction',
      \ }

 let g:lightline.component_expand = {
      \ 'linter_checking' : 'lightline#ale#checking',
      \ 'linter_infos'    : 'lightline#ale#infos',
      \ 'linter_warnings' : 'lightline#ale#warnings',
      \ 'linter_errors'   : 'lightline#ale#errors',
      \ 'linter_ok'       : 'lightline#ale#ok',
      \ 'gitdiff'         : 'lightline#gitdiff#get',
      \ }

 let g:lightline.component_type = {
      \ 'linter_checking' : 'right',
      \ 'linter_infos'    : 'right',
      \ 'linter_warnings' : 'warning',
      \ 'linter_errors'   : 'error',
      \ 'linter_ok'       : 'right',
      \ 'gitdiff'         : 'middle',
      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILETYPES
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" augroup FileTypes
"   autocmd!
"   autocmd FileType yaml,yml setlocal ts=2 sts=2 sw=2 expandtab
"         \ indentkeys-=0# indentkeys-=<:>
"         \ foldmethod=indent
" augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ","

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

nnoremap <C-a> <Home>
nnoremap <C-e> <End>
vnoremap <C-a> <Home>
vnoremap <C-e> <End>

nnoremap <silent> ]l :lnext<CR>
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>

" https://github.com/onivim/oni/issues/2342
tnoremap <s-space> <space>
tnoremap <esc><esc> <C-\><C-N>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" generate table of contents for markdown
function! GenTableOfContents() abort
  if &filetype == 'markdown'
    execute "silent ! npx doctoc --notitle %" | execute "silent ! npx prettier --write %" | checktime | silent redraw!
  endif
endfunction
command! TOC call GenTableOfContents()

""""""""""""""""""""""""""""""""""""""""
" CONFIGURATION FILE INITIALIZER
""""""""""""""""""""""""""""""""""""""""
" helper function
function! InitConfig(...)
  for config in a:000
    echomsg printf('cp -R ~/.dotfiles/templates/%s/ %s', config, FindRootDirectory())
    execute printf('silent !cp -R ~/.dotfiles/templates/%s/ %s', config, FindRootDirectory())
    redraw!
  endfor
endfunction

function! InitConfigCompletion(A, L, P) abort
  return readdir(expand("~/.dotfiles/templates/"), { d -> d =~ a:A })
endfunction

command! -nargs=+ -complete=customlist,InitConfigCompletion InitConfig call InitConfig(<f-args>)

""""""""""""""""""""""""""""""""""""""""
" UTILITIES
""""""""""""""""""""""""""""""""""""""""

" yarn global add jira-cli
command! -nargs=* Jira execute 'terminal jira <args>'
command! -nargs=* VJira execute 'vertical terminal jira <args>'

" brew install glab
command! -nargs=* Glab execute 'terminal glab <args>'
command! -nargs=* VGlab execute 'vertical terminal glab <args>'
" glab ci view
command! -nargs=* GlabCIView execute 'terminal glab ci view'
command! -nargs=* VGlabCIView execute 'vertical terminal glab ci view'
command! -nargs=* GCV execute 'terminal glab ci view'
command! -nargs=* VGCV execute 'vertical terminal glab ci view'
" glab ci status
command! -nargs=* GlabCIStat execute 'terminal glab ci status --live'
command! -nargs=* VGlabCIStat execute 'vertical terminal glab ci status --live'
command! -nargs=* GCS execute 'terminal glab ci status --live'
command! -nargs=* VGCS execute 'vertical terminal glab ci status --live'

function! Top() abort
  if executable("btm")
    terminal ++close ++shell btm
  elseif executable("htop")
    terminal ++close ++shell htop
  else
    terminal ++shell top
  end
endfunction
command! Top call Top()

function! BrewUp() abort
  !brew update && brew upgrade && brew cleanup
endfunction
command! BrewUp call BrewUp()

command! BuffOnly :%bdelete | edit# | normal `"
command! BO :%bdelete | edit# | normal `"

if has('nvim')
  command! -nargs=* T split | terminal <args>
  command! -nargs=* VT vsplit | terminal <args>
else
  command! -nargs=* T terminal <args>
  command! -nargs=* VT vertical terminal <args>
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" install built-in `matchit` plugin.
" See :h matchit-install
packadd! matchit

""""""""""""""""""""""""""""""""""""""""
" https://github.com/tyru/open-browser.vim
""""""""""""""""""""""""""""""""""""""""
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

""""""""""""""""""""""""""""""""""""""""
" https://github.com/tpope/vim-fugitive
""""""""""""""""""""""""""""""""""""""""
let g:fugitive_gitlab_domains = ['https://gitlab.zeta.tools']

""""""""""""""""""""""""""""""""""""""""
" https://github.com/junegunn/fzf.vim
""""""""""""""""""""""""""""""""""""""""
let g:fzf_layout = { 'down': '~40%' }

" FZF mappings
nnoremap <Leader>b <cmd>Buffers<cr>
nnoremap <Leader>f <cmd>Files<cr>
nnoremap <Leader>F <cmd>GFiles?<cr>
nnoremap <Leader>g <cmd>Rg<cr>

""""""""""""""""""""""""""""""""""""""""
" https://github.com/mhinz/vim-signify
""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> gs <Cmd>SignifyHunkDiff<CR>

""""""""""""""""""""""""""""""""""""""""
" https://github.com/ervandew/supertab
""""""""""""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType = "<c-n>"

""""""""""""""""""""""""""""""""""""""""
" https://github.com/SirVer/ultisnips
""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

""""""""""""""""""""""""""""""""""""""""
" https://github.com/dense-analysis/ale
""""""""""""""""""""""""""""""""""""""""
set omnifunc=ale#completion#OmniFunc

nnoremap <silent> <leader>af <Cmd>ALEFix<CR>
nnoremap <silent> <leader>al <Cmd>ALELint<CR>
nnoremap <silent> gd <Cmd>ALEGoToDefinition<CR>

let g:ale_fixers = {
      \ '*'          : [ "remove_trailing_lines", "trim_whitespace" ] ,
      \ 'sh'         : [ "shfmt"                                    ] ,
      \ 'bash'       : [ "shfmt"                                    ] ,
      \ 'javascript' : [ "prettier"                                 ] ,
      \ 'typescript' : [ "prettier", "eslint"                       ] ,
      \ 'markdown'   : [ "prettier"                                 ] ,
      \ 'yaml'       : [ "prettier"                                 ] ,
      \ 'json'       : [ "prettier"                                 ] ,
      \ 'go'         : [ "goimports"                                ] ,
      \ 'rust'       : [ "rustfmt"                                  ] ,
      \ 'ruby'       : [ "rubocop"                                  ] ,
      \ 'graphql'    : [ "prettier"                                 ] ,
      \ 'hcl'        : [ "terraform"                                ] ,
      \ 'terraform'  : [ "terraform"                                ] ,
      \ 'html'       : [ "prettier"                                 ] ,
      \ }
