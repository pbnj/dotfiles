# shellcheck shell=sh

# Weather: http://wttr.in/:help
# usage: wttr [location] [options]
wttr() {
    domain="wttr.in"
    location="${1}"
    options="${2}"
    curl "${domain}/${location:-""}?${options:-"qF"}"
}

################################################################################
# ddgr
# $ brew install ddgr
################################################################################

ddg() {
    # check if ddgr cli is installed
    if ! command -v ddgr /dev/null 2>&1; then
        echo "Error: could not find 'ddgr' cli in your path."
        echo "For installation instructions, see https://github.com/jarun/ddgr"
        echo "Or, if it is installed, make sure it is in your \${PATH} and try again."
        return 1
    fi

    # check args
    if [ -z "${1}" ]; then
        echo "Missing: bang"
        echo "Usage: ddg <bang> <search-term>"
        echo ""
        echo "Examples:"
        echo "  $ ddg g \"how to ...\""
        echo "  $ ddg dh ubuntu"
        echo "  $ ddg gh kubernetes/kubernetes"
        echo ""
        echo "For a full list of bangs, see https://duckduckgo.com/bang"
        return 1
    fi

    if [ -z "${2}" ]; then
        echo "Missing: search-term"
        echo "Usage: ddg <bang> <search-term>"
        echo ""
        echo "Examples:"
        echo "  $ ddg g \"how to ...\""
        echo "  $ ddg dh ubuntu"
        echo "  $ ddg gh kubernetes/kubernetes"
        echo ""
        echo "For a full list of bangs, see https://duckduckgo.com/bang"
        return 1
    fi

    ddgr --np "!${1} ${2}"
}

ddg_google() {
    ddg g "${1}"
}

ddg_gopkg() {
    ddg gopkg "${1}"
}

ddg_gh() {
    ddg gh "${1}"
}

ddg_dh() {
    ddg dh "${1}"
}

ddg_man() {
    ddg man "${1}"
}

ddg_aws() {
    ddg aws "${1}"
}

ddg_gif() {
    ddg gif "${1}"
}

################################################################################
# vim
################################################################################

## select one or more files from current working directory to edit
vimf() {
    FILES=$(fzf --multi --preview="cat {}")
    [ -n "${FILES}" ] && vim "${FILES}"
}

## select one or more git files to edit
vimg() {
    FILES=$(git ls-files | fzf --multi --preview="cat {}")
    [ -n "${FILES}" ] && vim "${FILES}"
}

## select one or more files from "git status" to edit
vims() {
    FILES=$(git ls-files --modified | fzf --multi --preview="cat {}")
    [ -n "${FILES}" ] && vim "${FILES}"
}

## select one or more TODO files to edit
vimt() {
    FILES=$(git grep -l "TODO" | fzf --multi --preview="cat {}")
    [ -n "${FILES}" ] && vim "${FILES}"
}

################################################################################
# giphy
################################################################################

giphy() {
    local query="${1}"

    if [ -z "${query}" ]; then
        echo "Missing: <query>"
        echo "Usage: giphy <query>"
        echo "Examples:"
        echo "  $ giphy yay"
        echo "  $ open \$(giphy why)"
        echo "  $ giphy laugh%20cry | pbcopy"
        return 1
    fi

    curl -fsSL "https://giphy.com/search/${query}" |
        rg -oP "(?<=gifs: ).*?(?=,$)" |
        jq ".[$(echo $((${RANDOM} % 25)))] | .images.original.url" |
        tr -d '"'
}

################################################################################
# mmdcgrep
# $ yarn global add @mermaid-js/mermaid-cli
################################################################################

mmdcgrep() {
    local file="${1}"
    pcregrep -Mo '(?s)(?<=```mermaid).*?(?=```)' "${file}"
}

# vim: ft=sh
