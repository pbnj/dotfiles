# =============
#    INIT
# =============
# Senstive functions which are not pushed to Github
# It contains GOPATH, some functions, aliases etc...
# [ -r ~/.zsh_private ] && source ~/.zsh_private
fpath=( "$HOME/.zsh" $fpath )
[ -z "$SSH_AUTH_SOCK" ] && eval $(ssh-agent) && ssh-add

# =============
#    ALIAS
# =============
alias ..='cd ..'
alias l='gls -alFh --group-directories-first --color=auto'
alias g='git'
alias d='docker'
alias k='kubectl'

# =============
#    EXPORT
# =============
export EDITOR="vim"
export LSCOLORS=cxBxhxDxfxhxhxhxhxcxcx
export CLICOLOR=1

# support colors in less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# support utf-8
export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# =============
#    HISTORY
# =============

## Command history configuration
if [ -z "$HISTFILE" ]; then
    HISTFILE=$HOME/.zsh_history
fi

HISTSIZE=1000000
SAVEHIST=1000000

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
# ignore duplication command history list
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
# share command history data
setopt share_history

# =============
#    PROMPT
# =============

## =============
## Powerlevel9k
## =============

# source  ~/powerlevel9k/powerlevel9k.zsh-theme
# POWERLEVEL9K_DISABLE_RPROMPT=true
# POWERLEVEL9K_PROMPT_ON_NEWLINE=true
# POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(status time kubecontext context dir vcs)

## =============
## Spaceship
## npm install -g spaceship-prompt
## =============

autoload -U promptinit; promptinit
prompt spaceship
SPACESHIP_PROMPT_ORDER=(
  user          # Username section
  host          # Hostname section
  dir           # Current directory section
  git           # Git section (git_branch + git_status)
  node          # Node.js section
  ruby          # Ruby section
  golang        # Go section
  docker        # Docker section
  aws           # Amazon Web Services section
  line_sep      # Line break
  char          # Prompt character
)

SPACESHIP_RPROMPT_ORDER=(
  jobs          # Background jobs indicator
  exec_time     # Execution time
  exit_code     # Exit code section
  kubecontext   # Kubectl context section
  battery       # Battery level and status
  time          # Time stampts section
)

SPACESHIP_BATTERY_SHOW='always'
# SPACESHIP_CHAR_SYMBOL='$ '
SPACESHIP_TIME_SHOW='true'
SPACESHIP_TIME_PREFIX=''

## =============
## Custom
## =============

# autoload -U promptinit; promptinit
# autoload -U colors && colors
# setopt promptsubst

# ZSH_THEME_DATE_FORMAT=""
# ZSH_THEME_DATE_COLOR=""
# ZSH_THEME_USER_COLOR=""
# ZSH_THEME_HOST_COLOR=""
# ZSH_THEME_DIR_COLOR="magenta"
# ZSH_THEME_KUBECTX_COLOR="cyan"
# ZSH_THEME_KUBECTX_SYMBOL=""
# ZSH_THEME_GIT_PROMPT_COLOR="cyan"
# ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[${ZSH_THEME_GIT_PROMPT_COLOR:-white}]%}git:(%{$fg[red]%}"
# ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
# ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg_bold[${ZSH_THEME_GIT_PROMPT_COLOR:-white}]%}) %{$fg[yellow]%}âœ—"
# ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[${ZSH_THEME_GIT_PROMPT_COLOR:-white}]%})"

# RPROMPT='$(date_info)'
# PROMPT='
# $(context_info)$(dir_info)$(kubectl_context_info)$(git_prompt_info)
# $(prompt_status)'

# ### ==========
# ### PROMPT STATUS
# ### ==========
# function prompt_status() {
  # local ret_status="%(?:%{$fg_bold[green]%}$:%{$fg_bold[red]%}$)"
  # echo "${ret_status}%{$reset_color%} "
# }

# ### ==========
# ### DIR
# ### ==========
# function dir_info() {
  # echo "%{$fg_bold[${ZSH_THEME_DIR_COLOR:-white}]%}%~%{$reset_color%} "
# }

# ### ==========
# ### CONTEXT
# ### ==========
# function context_info() {
  # local USER="%{$fg_bold[${ZSH_THEME_USER_COLOR:-white}]%}%n%{$reset_color%}"
  # local HOST="%{$fg_bold[${ZSH_THEME_HOST_COLOR:-white}]%}%M%{$reset_color%}"
  # echo "$USER @ $HOST "
# }

# ### ==========
# ### DATE
# ### ==========
# function date_info() {
  # local DATE=$(date +${ZSH_THEME_DATE_FORMAT:-%Y-%m-%d %H:%M:%S})
  # echo "%{$fg[${ZSH_THEME_DATE_COLOR:-white}]%}$DATE%{$reset_color%} "
# }

# ### ==========
# ### KUBECTL
# ### ==========
# function kubectl_context_info() {
  # local CTX=$(command kubectl config current-context)
  # local CTX_PREFIX="%{$fg_bold[${ZSH_THEME_KUBECTX_COLOR:-white}]%}${ZSH_THEME_KUBECTX_SYMBOL:-kube}:(%{$fg[red]%}"
  # local CTX_SUFFIX="%{$fg_bold[${ZSH_THEME_KUBECTX_COLOR:-white}]%})%{$reset_color%} "
  # if [[ -n $CTX ]]; then
    # echo "$CTX_PREFIX$CTX$CTX_SUFFIX"
  # fi
# }

# ### ==========
# ### GIT
# ### ==========
# # Outputs current branch info in prompt format
# function git_prompt_info() {
  # local ref
  # if [[ "$(command git config --get customzsh.hide-status 2>/dev/null)" != "1" ]]; then
    # ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    # ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    # echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
  # fi
# }

# # Checks if working tree is dirty
# function parse_git_dirty() {
  # local STATUS=''
  # local FLAGS
  # FLAGS=('--porcelain')

  # if [[ "$(command git config --get customzsh.hide-dirty)" != "1" ]]; then
    # FLAGS+='--ignore-submodules=dirty'
    # STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
  # fi

  # if [[ -n $STATUS ]]; then
    # echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  # else
    # echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  # fi
# }

# ===================
#    AUTOCOMPLETION
# ===================
# enable completion
autoload -Uz compinit
compinit

zmodload -i zsh/complist

WORDCHARS=''

unsetopt menu_complete   # do not autoselect the first completion entry
unsetopt flowcontrol
setopt auto_menu         # show completion menu on successive tab press
setopt complete_in_word
setopt always_to_end

# autocompletion with an arrow-key driven interface
zstyle ':completion:*:*:*:*:*' menu select

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
        clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
        gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
        ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
        named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
        operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
        usbmux uucp vcsa wwwrun xfs '_*'

zstyle '*' single-ignored show

# Automatically update PATH entries
zstyle ':completion:*' rehash true

# Keep directories and files separated
zstyle ':completion:*' list-dirs-first true

# ===================
#    KEY BINDINGS
# ===================
# Use emacs-like key bindings by default:
bindkey -e

# [Ctrl-r] - Search backward incrementally for a specified string. The string
# may begin with ^ to anchor the search to the beginning of the line.
bindkey '^r' history-incremental-search-backward

if [[ "${terminfo[kpp]}" != "" ]]; then
  bindkey "${terminfo[kpp]}" up-line-or-history       # [PageUp] - Up a line of history
fi

if [[ "${terminfo[knp]}" != "" ]]; then
  bindkey "${terminfo[knp]}" down-line-or-history     # [PageDown] - Down a line of history
fi

if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line      # [Home] - Go to beginning of line
fi

if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}"  end-of-line            # [End] - Go to end of line
fi
if [[ "${terminfo[kcbt]}" != "" ]]; then
  bindkey "${terminfo[kcbt]}" reverse-menu-complete   # [Shift-Tab] - move through the completion menu backwards
fi

bindkey '^?' backward-delete-char                     # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
  bindkey "${terminfo[kdch1]}" delete-char            # [Delete] - delete forward
else
  bindkey "^[[3~" delete-char
  bindkey "^[3;5~" delete-char
  bindkey "\e[3~" delete-char
fi

# ===================
#    MISC SETTINGS
# ===================

# automatically remove duplicates from these arrays
typeset -U path PATH cdpath CDPATH fpath FPATH manpath MANPATH

# ===================
#    PLUGINS
# ===================

[ -f $HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && source $HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
[ -f $HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ] && source $HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

# ===================
#    THIRD PARTY
# ===================

# GO
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$(go env GOPATH)/bin

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# HUB
eval $(hub alias -s zsh)
